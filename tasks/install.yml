---
- name: "Check for snoopy installation"
  ansible.builtin.stat:
    path: '{{ snoopy_exec_path }}/snoopyctl'
  changed_when: false
  register: snoopy_binary

- name: "Installation"
  when: not snoopy_binary.stat.exists or snoopy_force_install|bool
  block:
    - name: "DEBIAN-11/12 | Install requirements"
      ansible.builtin.package:
        name: libc6-dev
        state: present
      when: ansible_distribution == 'Debian' and ansible_distribution_major_version >= '11'

    - name: "Create log file"
      ansible.builtin.file:
        path: /var/log/snoopy.log
        state: touch
        mode: '0644'

    - name: "Download requirements"
      ansible.builtin.package:
        name: "{{ snoopy_compile_pkg_install }}"
        state: present

    - name: "Download last snoopy script"
      ansible.builtin.get_url:
        url: https://github.com/a2o/snoopy/raw/install/install/install-snoopy.sh
        dest: /tmp/install-snoopy.sh
        mode: '0755'

    - name: "Install snoppy"
      ansible.builtin.command: /tmp/install-snoopy.sh stable
      changed_when: true

    - name: "Uninstall unnecessary requirements"
      ansible.builtin.package:
        name: "{{ snoopy_compile_pkg_uninstall }}"
        state: absent
      when: snoopy_uninstall_pkg|bool

- name: "Set config"
  ansible.builtin.lineinfile:
    dest: '{{ snoopy_cfg_file }}'
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - {regexp: "^output = file:", line: "output = file:{{ snoopy_log_file }}"}
    - {regexp: '^filter_chain =', line: 'filter_chain = "exclude_spawns_of:cron,my_daemon;only_tty"'}
    - {regexp: "^message_format =", line: 'message_format = "{{ snoopy_msg_format }}"'}
  notify:
    - stop snoopy
    - start snoopy

#- name: snoopy | Create a logrotate file
#  ansible.builtin.copy:
#    src: snoopy
#    dest: /etc/logrotate.d/snoopy
#    owner: root
#    group: root
#    mode: '0640'
#
